<?php

/**
 * Generic helper for module
 *
 * @category   Rejoiner
 * @package    Rejoiner_Acr
 */
class Rejoiner_Acr_Helper_Data extends Mage_Core_Helper_Abstract
{

    const XML_PATH_REJOINER_ENABLED         = 'checkout/rejoiner_acr/enabled';
    const XML_PATH_REJOINER_SITE_ID         = 'checkout/rejoiner_acr/site_id';
    const XML_PATH_REJOINER_DOMAIN          = 'checkout/rejoiner_acr/domain';
    const XML_PATH_REJOINER_TRACK_NUMBERS   = 'checkout/rejoiner_acr/track_numbers';
    const XML_PATH_REJOINER_PERSIST_FORMS   = 'checkout/rejoiner_acr/persist_forms';


    public function getRejoinerSiteId()
    {
        return Mage::getStoreConfig(self::XML_PATH_REJOINER_SITE_ID);
    }


    public function getRestoreUrl()
    {
        $product = array();
        if (Mage::helper('checkout/cart')->getCart()->getItems()) {
            $items = Mage::helper('checkout/cart')->getCart()->getItems()->load()->getItems();
            foreach ($items as $item) {
                if (!$item->getParentItem()) {
                    $options = unserialize($item->getOptionByCode('info_buyRequest')->getValue());
                    $options['qty'] = $item->getQty();
                    $options['product'] = $item->getProductId();
                    $product[] = $options;
                }
            }
        }
        $url = Mage::getUrl('rejoiner/addtocart?'.http_build_query($product));
        return substr($url, 0, strlen($url)-1);
    }

    public function getDomain()
    {
        $domain = trim(Mage::getStoreConfig(self::XML_PATH_REJOINER_DOMAIN));
        if ($domain[0] == '.') {
            return $domain;
        } else {
            return '.' . $domain;
        }
    }

    public function getTrackNumberEnabled()
    {
        return Mage::getStoreConfig(self::XML_PATH_REJOINER_TRACK_NUMBERS);
    }

    public function getPersistFormsEnabled()
    {
        return Mage::getStoreConfig(self::XML_PATH_REJOINER_PERSIST_FORMS);
    }

    public function generateCouponCode()
    {
        $couponCode = Mage::helper('checkout/cart')->getCart()->getQuote()->getPromo();
        $rule_id = Mage::getStoreConfig('checkout/rejoiner_acr/salesrule_model');
        $ruleItem = Mage::getModel('salesrule/rule')
                    ->getCollection()
                    ->addFieldToFilter('rule_id', array('eq' => $rule_id))
                    ->getFirstItem();
        if ($ruleItem->getUseAutoGeneration() && !$couponCode)
        {
            $couponCode = Mage::getModel('salesrule/coupon_codegenerator')->generateCode();

            Mage::getModel('salesrule/coupon')
                ->setRuleId($rule_id)
                ->setCode($couponCode)
                ->setUsageLimit(1)
                ->setCreatedAt(time())
                ->setType(Mage_SalesRule_Helper_Coupon::COUPON_TYPE_SPECIFIC_AUTOGENERATED)
                ->save();

            Mage::getSingleton('checkout/cart')
                ->getQuote()
                ->setPromo(strlen($couponCode) ? $couponCode : '')
                ->save();
        }
        return $couponCode;
    }

    public function checkHttps()
    {
        if (empty($this->_currentProtocolSecurity)) {
            if (isset($_SERVER['HTTPS']) &&
                ($_SERVER['HTTPS'] == 'on' || $_SERVER['HTTPS'] == 1) ||
                isset($_SERVER['HTTP_X_FORWARDED_PROTO']) &&
                $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') {
                $secure = true;
            }
            else {
                $secure = false;
            }
            $this->_currentProtocolSecurity = $secure;
        } else {
            $secure = $this->_currentProtocolSecurity;
        }

        return $secure;
    }
}
